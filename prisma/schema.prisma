generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sqlx_migrations {
  version        BigInt?  @id
  description    String
  installed_on   DateTime @default(now())
  success        Boolean
  checksum       Bytes
  execution_time BigInt

  @@map("_sqlx_migrations")
  @@ignore
}

model categories {
  id           Int        @id @default(autoincrement())
  categoryName String?
  categoryKey  String?
  locationId   Int?
  updateAt     DateTime?
  createAt     DateTime?  @default(now())
  locations    locations? @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments     payments[]
}

model locations {
  id           Int          @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  userId       Int?
  latitude     Float?
  longitude    Float?
  updateAt     DateTime?
  createAt     DateTime?    @default(now())
  categories   categories[]
  users        users?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments     payments[]
}

model payments {
  id            Int         @id @default(autoincrement())
  amount        Decimal?
  description   String?
  currency      String?
  paymentMethod String?
  categoryId    Int?
  locationId    Int?
  updateAt      DateTime?
  createAt      DateTime?   @default(now())
  locations     locations?  @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories    categories? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_settings {
  id       Int       @id @default(autoincrement())
  settings String?
  userId   Int?
  updateAt DateTime?
  createAt DateTime? @default(now())
  users    users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id            Int             @id @default(autoincrement())
  name          String?
  password      String?
  locations     locations[]
  user_settings user_settings[]
}
